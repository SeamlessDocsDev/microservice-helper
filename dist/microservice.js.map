{"version":3,"sources":["../lib/microservice.js"],"names":["doFn","_generateState","seneca","msg","notAllowedKeys","nMsg","key","indexOf","Object","assign","fnc","done","state","returnData","tryFnc","finalState","ok","data","promise","then","catch","process","env","NODE_ENV","DEBUG","console","error","err"],"mappings":";;;;;QA0BgBA,I,GAAAA,I;;AAnBhB;;AAEA,SAASC,cAAT,CAAyBC,MAAzB,EAAiCC,GAAjC,EAAsC;AACpC,MAAMC,iBAAiB,CAAC,SAAD,EAAY,OAAZ,EAAqB,SAArB,EAAgC,KAAhC,CAAvB;AACA,MAAIC,OAAO,EAAX;;AAEA,OAAK,IAAIC,GAAT,IAAgBH,GAAhB,EAAqB;AACnB,QAAIC,eAAeG,OAAf,CAAuBD,GAAvB,IAA8B,CAAC,CAAnC,EAAsC;AACtCD,SAAKC,GAAL,IAAYH,IAAIG,GAAJ,CAAZ;AACD;;AAED,SAAOE,OAAOC,MAAP,CAAc,EAAd,EAAkB,EAACP,cAAD,EAAlB,EAA4BG,IAA5B,CAAP;AACD;AACD;;;;;;AApBA;;;;;AAKA;AACA;AAoBO,SAASL,IAAT,CAAeU,GAAf,EAAoB;AACzB,SAAO,UAAUP,GAAV,EAAeQ,IAAf,EAAqB;AAC1B,QAAMC,QAAQX,eAAe,IAAf,EAAqBE,GAArB,CAAd;;AAEA,QAAIU,aAAa,EAAjB;;AAEAC,YACE,IAAI;AACF,UAAMC,aAAaL,wBAAW,IAAX,EAAiBE,KAAjB,CAAnB;;AAEA,UAAI,EAAEG,+CAAF,CAAJ,EAA2C;AACzCF,qBAAa,EAACG,IAAI,IAAL,EAAWC,MAAMF,UAAjB,EAAb;AACA,cAAMD,MAAN;AACD;;AAEDC,iBAAWG,OAAX,CAAmBC,IAAnB,CAAwB,sBAAc;AACpCR,aAAK,IAAL,EAAW,EAACK,IAAI,IAAL,EAAWC,MAAMF,UAAjB,EAAX;AACD,OAFD,EAGGK,KAHH,CAGS,eAAO;AACZ,YAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCF,QAAQC,GAAR,CAAYE,KAAzD,EAAgEC,QAAQC,KAAR,CAAcC,GAAd;AAChEhB,aAAK,IAAL,EAAW,EAACK,IAAI,KAAL,EAAYU,OAAOC,GAAnB,EAAX;AACD,OANH;AAOA;AACD,KAhBD,CAgBE,OAAOA,GAAP,EAAY;AACZd,mBAAa,EAACG,IAAI,KAAL,EAAYU,OAAOC,GAAnB,EAAb;AACD;;AAEHhB,SAAK,IAAL,EAAWE,UAAX;AACD,GA3BD;AA4BD","file":"microservice.js","sourcesContent":["/**\n *  Microservices pipeline.\n * @module\n */\n\n// NOTE: we need to remove no-labels for this project, try to avoid this kind of fixes\n/* eslint-disable no-labels */\nimport { $pipe, $pipePromise } from './pipePromise'\n\nfunction _generateState (seneca, msg) {\n  const notAllowedKeys = ['caller$', 'meta$', 'plugin$', 'tx$']\n  let nMsg = {}\n\n  for (let key in msg) {\n    if (notAllowedKeys.indexOf(key) > -1) continue\n    nMsg[key] = msg[key]\n  }\n\n  return Object.assign({}, {seneca}, nMsg)\n}\n/**\n * Wrapper function. If all is ok, the result will be { ok : true , data : {result} }\n * When is an error in business logic, the result will be { ok : false, err : Error }.\n * @param {Function} fnc Command function that must be executed.\n * @returns {Object}\n */\nexport function doFn (fnc) {\n  return function (msg, done) {\n    const state = _generateState(this, msg)\n\n    let returnData = {}\n\n    tryFnc:\n      try {\n        const finalState = fnc($pipe, true, state)\n\n        if (!(finalState instanceof $pipePromise)) {\n          returnData = {ok: true, data: finalState}\n          break tryFnc\n        }\n\n        finalState.promise.then(finalState => {\n          done(null, {ok: true, data: finalState})\n        })\n          .catch(err => {\n            if (process.env.NODE_ENV === 'production' || process.env.DEBUG) console.error(err)\n            done(null, {ok: false, error: err})\n          })\n        return\n      } catch (err) {\n        returnData = {ok: false, error: err}\n      }\n\n    done(null, returnData)\n  }\n}\n"]}