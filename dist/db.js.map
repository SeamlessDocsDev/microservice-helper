{"version":3,"sources":["../lib/db.js"],"names":["savePromisified","findPromisified","findOnePromisified","findOrPromisified","updatePromisified","updateNativePromisified","removeNativePromisified","removePromisified","populatePromisified","mongoObjectId","_load","id","senecaQuery","next","load$","err","data","Error","data$","_getFieldValue","object","field","fieldKey","fieldValue","indexOf","keyRaw","split","length","chain","at","head","value","element","collection","seneca","Promise","resolve","reject","query","Object","assign","make$","save$","dataRaw","where","list$","ret","map","e","undefined","conditionsTasks","cond","runQuery","series","values","listResult","reduce","acc","v","objs","d","r","concat","listMerged","uniqBy","listDataRaw","listData","bundle","fields","originalDoc","updatedDoc","f","fieldToUpdate","set","get","merged","mergeWith","origValue","newValue","isArray","isPlainObject","opFields","native$","db","forms","findAndModify","new","result","remove","remove$","keyString","select","subtree","validValues","filter","toMerge","elements","s","timestamp","Date","getTime","toString","replace","Math","random","toLowerCase"],"mappings":";;;;;QAqCgBA,e,GAAAA,e;QAiBAC,e,GAAAA,e;QAoBAC,kB,GAAAA,kB;QAoBAC,iB,GAAAA,iB;QA0CAC,iB,GAAAA,iB;QAkCAC,uB,GAAAA,uB;QAmBAC,uB,GAAAA,uB;QAkBAC,iB,GAAAA,iB;QAmBAC,mB,GAAAA,mB;QA4CAC,a,GAAAA,a;;AA9QhB;;;;AACA;;;;AACA;;;;;;AAEA,SAASC,KAAT,CAAgBC,EAAhB,EAAoBC,WAApB,EAAiCC,IAAjC,EAAuC;AACrCD,cAAYE,KAAZ,CAAkBH,EAAlB,EAAsB,UAACI,GAAD,EAAMC,IAAN,EAAe;AACnC,QAAID,GAAJ,EAAS,OAAOF,KAAKE,GAAL,CAAP;AACT,QAAI,CAACC,IAAL,EAAW,OAAOH,KAAK,IAAII,KAAJ,CAAU,WAAV,CAAL,CAAP;;AAEXJ,SAAK,IAAL,EAAWG,KAAKE,KAAL,EAAX;AACD,GALD;AAOD;;AAED,SAASC,cAAT,CAAyBC,MAAzB,EAAiCC,KAAjC,EAAwC;AACtC,MAAIC,iBAAJ;AACA,MAAIC,mBAAJ;;AAEA;AACA;AACA,MAAIF,MAAMG,OAAN,CAAc,GAAd,IAAqB,CAAzB,EAA4B;AAC1B,QAAIC,SAASJ,MAAMK,KAAN,CAAY,QAAZ,CAAb;;AAEAJ,eAAaG,OAAOA,OAAOE,MAAP,GAAgB,CAAvB,CAAb;AACAJ,iBAAa,iBAAOK,KAAP,CAAaR,MAAb,EACOS,EADP,CACUR,KADV,EAEOS,IAFP,GAGOC,KAHP,EAAb;AAID,GARD,MAQO;AACLT,eAAaD,KAAb;AACAE,iBAAaH,OAAOC,KAAP,CAAb;AACD;;AAED,SAAO,EAACC,kBAAD,EAAWC,sBAAX,EAAP;AAED;;AAEM,SAASvB,eAAT,CAA0BgC,OAA1B,EAAmCC,UAAnC,EAA+C;;AAEpD,MAAIC,SAAS,IAAb;;AAEA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,QAAQC,OAAOC,MAAP,CAAcN,OAAOO,KAAP,CAAaR,UAAb,CAAd,EAAwCD,OAAxC,CAAd;;AAEAM,UAAMI,KAAN,CAAY,UAAC3B,GAAD,EAAM4B,OAAN,EAAkB;AAC5B,UAAI5B,GAAJ,EAAS,OAAOsB,OAAOtB,GAAP,CAAP;;AAET,UAAMC,OAAO2B,QAAQzB,KAAR,EAAb;AACAkB,cAAQ,EAACO,gBAAD,EAAU3B,UAAV,EAAR;AACD,KALD;AAOD,GAVM,CAAP;AAWD;;AAEM,SAASf,eAAT,CAA0B2C,KAA1B,EAAiCX,UAAjC,EAA6C;;AAElD,MAAIC,SAAS,IAAb;;AAEA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,QAAQJ,OAAOO,KAAP,CAAaR,UAAb,CAAZ;;AAEAK,UAAMO,KAAN,CAAYD,KAAZ,EAAmB,UAAC7B,GAAD,EAAM+B,GAAN,EAAc;AAC/B,UAAI/B,GAAJ,EAAS,OAAOsB,OAAOtB,GAAP,CAAP;;AAET,UAAMC,OAAU8B,MAAMA,IAAIC,GAAJ,CAAQ;AAAA,eAAKC,EAAE9B,KAAF,EAAL;AAAA,OAAR,CAAN,GAAgC,EAAhD;AACA,UAAMyB,UAAUG,OAAO,EAAvB;;AAEAV,cAAQ,EAACO,gBAAD,EAAU3B,UAAV,EAAR;AACD,KAPD;AASD,GAZM,CAAP;AAcD;;AAEM,SAASd,kBAAT,CAA6B0C,KAA7B,EAAoCX,UAApC,EAAgD;;AAErD,MAAIC,SAAS,IAAb;;AAEA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,QAAQJ,OAAOO,KAAP,CAAaR,UAAb,CAAZ;;AAEAK,UAAMxB,KAAN,CAAY8B,KAAZ,EAAmB,UAAC7B,GAAD,EAAM+B,GAAN,EAAc;AAC/B,UAAI/B,GAAJ,EAAS,OAAOsB,OAAOtB,GAAP,CAAP;;AAET,UAAMC,OAAU8B,MAAMA,IAAI5B,KAAJ,EAAN,GAAoB+B,SAApC;AACA,UAAMN,UAAUG,OAAOG,SAAvB;;AAEAb,cAAQ,EAACO,gBAAD,EAAU3B,UAAV,EAAR;AACD,KAPD;AASD,GAZM,CAAP;AAcD;;AAEM,SAASb,iBAAT,CAA4ByC,KAA5B,EAAmCX,UAAnC,EAA+C;;AAEpD,MAAIC,SAAS,IAAb;;AAEA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,QAAQJ,OAAOO,KAAP,CAAaR,UAAb,CAAZ;;AAEA,QAAMiB,kBAAkBN,MAAMG,GAAN,CAAU,UAACI,IAAD,EAAU;AAC1C,eAASC,QAAT,CAAmBvC,IAAnB,EAAyB;AACvByB,cAAMO,KAAN,CAAYM,IAAZ,EAAkB,UAACpC,GAAD,EAAMC,IAAN,EAAe;AAC/BH,eAAK,IAAL,EAAWG,IAAX;AACD,SAFD;AAGD;;AAED,aAAOoC,QAAP;AACD,KARuB,CAAxB;;AAUA,oBAAMC,MAAN,CAAaH,eAAb,EAA8B,UAACnC,GAAD,EAAMuC,MAAN,EAAiB;;AAE7C;AACA;AACA,UAAMC,aAAa,iBAAOC,MAAP,CAAcF,MAAd,EAAsB,UAACG,GAAD,EAAMC,CAAN,EAAY;AACnD,YAAMC,OAAOD,EAAEX,GAAF,CAAM;AAAA,iBAAKR,OAAOC,MAAP,CAAc,EAAd,EAAkB,EAACoB,GAAIZ,EAAE9B,KAAF,EAAL,EAAlB,EAAmC,EAAC2C,GAAIb,CAAL,EAAnC,CAAL;AAAA,SAAN,CAAb;AACA,eAAOS,IAAIK,MAAJ,CAAWH,IAAX,CAAP;AACD,OAHkB,EAGhB,EAHgB,CAAnB;;AAKA;AACA,UAAMI,aAAa,iBAAOC,MAAP,CAAcT,UAAd,EAA0B,MAA1B,CAAnB;;AAEA;AACA,UAAMU,cAAcF,WAAWhB,GAAX,CAAe;AAAA,eAAKc,EAAEA,CAAP;AAAA,OAAf,CAApB;AACA,UAAMK,WAAcH,WAAWhB,GAAX,CAAe;AAAA,eAAKc,EAAED,CAAP;AAAA,OAAf,CAApB;;AAEA,UAAMjB,UAAUsB,eAAe,EAA/B;AACA,UAAMjD,OAAUkD,YAAY,EAA5B;;AAEA9B,cAAQ,EAACO,gBAAD,EAAU3B,UAAV,EAAR;AACD,KApBD;AAsBD,GAnCM,CAAP;AAoCD;;AAEM,SAASZ,iBAAT,CAA4BuC,OAA5B,EAAqCwB,MAArC,EAA6CC,MAA7C,EAAqD;;AAE1D,SAAO,IAAIjC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,QAAMgC,cAAc1B,QAAQzB,KAAR,EAApB;;AAEA,QAAMoD,aAAa,iBAAOd,MAAP,CAAcY,MAAd,EAAsB,UAACX,GAAD,EAAMc,CAAN,EAAY;AACnD,UAAMC,gBAAgB,aAASC,GAAT,CAAaF,CAAb,EAAgB,iBAAOG,GAAP,CAAWP,MAAX,EAAmBI,CAAnB,CAAhB,EAAuCd,GAAvC,CAAtB;;AAEA,UAAMkB,SAAS,iBAAOC,SAAP,CAAiBP,WAAjB,EAA8BG,aAA9B,EAA6C,UAACK,SAAD,EAAYC,QAAZ,EAAyB;;AAEnF,YAAIP,EAAE/C,OAAF,CAAU,GAAV,IAAiB,CAArB,EAAwB;AACtB,iBAAOe,OAAOC,MAAP,CAAc,EAAd,EAAkBqC,SAAlB,EAA6BC,QAA7B,CAAP;AACD;;AAED,YAAI,iBAAOC,OAAP,CAAeF,SAAf,KAA6B,iBAAOG,aAAP,CAAqBH,SAArB,CAAjC,EAAkE;AAChE,iBAAOC,QAAP;AACD;AACF,OATc,CAAf;;AAWA,aAAOH,MAAP;AAED,KAhBkB,EAgBhB,EAhBgB,CAAnB;;AAkBAhC,YAAQzB,KAAR,CAAcoD,UAAd,EACQ5B,KADR,CACc,UAAC3B,GAAD,EAAM4B,OAAN,EAAkB;AACvB,UAAI5B,GAAJ,EAAS,OAAOsB,OAAOtB,GAAP,CAAP;;AAET,UAAMC,OAAO2B,QAAQzB,KAAR,EAAb;AACAkB,cAAQ,EAACO,gBAAD,EAAU3B,UAAV,EAAR;AACD,KANR;AAOD,GA7BM,CAAP;AA8BD;;AAEM,SAASX,uBAAT,CAAkCuC,KAAlC,EAAyCqC,QAAzC,EAAmDhD,UAAnD,EAA+D;;AAEpE,MAAIC,SAAS,IAAb;;AAEA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,QAAQJ,OAAOO,KAAP,CAAaR,UAAb,CAAZ;;AAEAK,UAAM4C,OAAN,CAAc,UAACnE,GAAD,EAAMoE,EAAN,EAAa;AACzB,UAAIC,QAAQD,GAAGlD,UAAH,CAAcA,UAAd,CAAZ;AACAkD,SAAGlD,UAAH,CAAcA,UAAd,EACGoD,aADH,CACiBzC,KADjB,EACwB,CAAC,CAAC,KAAD,EAAQ,KAAR,CAAD,CADxB,EAC0CqC,QAD1C,EACoD,EAACK,KAAM,IAAP,EADpD,EACkE,UAACvE,GAAD,EAAMwE,MAAN,EAAiB;AAC/E,YAAIxE,GAAJ,EAAS,OAAOsB,OAAOtB,GAAP,CAAP;AACTqB,gBAAQmD,OAAOxD,KAAf;AACD,OAJH;AAKD,KAPD;AASD,GAZM,CAAP;AAaD;;AAEM,SAASzB,uBAAT,CAAkCsC,KAAlC,EAAyCX,UAAzC,EAAqD;;AAE1D,MAAIC,SAAS,IAAb;;AAEA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,QAAQJ,OAAOO,KAAP,CAAaR,UAAb,CAAZ;;AAEAK,UAAM4C,OAAN,CAAc,UAACnE,GAAD,EAAMoE,EAAN,EAAa;AACzBA,SAAGlD,UAAH,CAAcA,UAAd,EACGuD,MADH,CACU5C,KADV,EACiB,UAAC7B,GAAD,EAAMwE,MAAN,EAAiB;AAC9B,YAAIxE,GAAJ,EAAS,OAAOsB,OAAOtB,GAAP,CAAP;AACTqB,gBAAQmD,OAAOA,MAAf;AACD,OAJH;AAKD,KAND;AAOD,GAVM,CAAP;AAYD;;AAEM,SAAShF,iBAAT,CAA4BqC,KAA5B,EAAmCX,UAAnC,EAA+C;AACpD,MAAIC,SAAS,IAAb;;AAEA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,QAAQJ,OAAOO,KAAP,CAAaR,UAAb,CAAZ;;AAEAK,UAAMmD,OAAN,CAAc7C,KAAd,EAAqB,UAAC7B,GAAD,EAAMC,IAAN,EAAe;AAClC,UAAID,GAAJ,EAAS,OAAOsB,OAAOtB,GAAP,CAAP;AACT,UAAI,CAACC,IAAL,EAAW,OAAOqB,OAAOtB,GAAP,CAAP;;AAEX;AACA;AACAqB,cAAQ,CAAR;AACD,KAPD;AASD,GAZM,CAAP;AAcD;;AAEM,SAAS5B,mBAAT,CAA8BY,MAA9B,EAAsCsE,SAAtC,EAAiDC,MAAjD,EAAyD1D,UAAzD,EAAqE;;AAE1E,MAAIC,SAAS,IAAb;;AAEA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,QAAIC,QAAQJ,OAAOO,KAAP,CAAaR,UAAb,CAAZ;;AAEA;AACA;AACA;AACA,QAAM2D,UAAU,iBAAOhE,KAAP,CAAaR,MAAb,EACOS,EADP,CACU6D,SADV,EAEO5D,IAFP,GAGOC,KAHP,EAAhB;;AAKA,oBAAMgB,GAAN,CAAU6C,OAAV,EAAmB,UAACjF,EAAD,EAAKE,IAAL,EAAc;AACrB,aAAOH,MAAMC,EAAN,EAAU2B,KAAV,EAAiBzB,IAAjB,CAAP;AACD,KAFX,EAEa,UAACE,GAAD,EAAMuC,MAAN,EAAiB;;AAElB,UAAMuC,cAAcvC,OAAOwC,MAAP,CAAc,UAACpC,CAAD;AAAA,eAAOA,KAAKT,SAAZ;AAAA,OAAd,CAApB;;AAEA,UAAI8C,UAAUF,WAAd;;AAEA,UAAIF,OAAOhE,MAAP,GAAgB,CAApB,EAAuB;;AAErBoE,kBAAU,iBAAOvC,MAAP,CAAcqC,WAAd,EAA2B,UAACN,MAAD,EAAS7B,CAAT,EAAe;;AAElD,cAAIsC,WAAW,iBAAOxC,MAAP,CAAcmC,MAAd,EAAsB,UAAClC,GAAD,EAAMwC,CAAN,EAAY;AAAA,kCAClB9E,eAAeuC,CAAf,EAAkBuC,CAAlB,CADkB;AAAA,gBAC1C3E,QAD0C,mBAC1CA,QAD0C;AAAA,gBAChCC,UADgC,mBAChCA,UADgC;;AAE/C,mBAAO,aAASkD,GAAT,CAAanD,QAAb,EAAuBC,UAAvB,EAAmCkC,GAAnC,CAAP;AACD,WAHc,EAGZ,EAHY,CAAf;;AAKA,iBAAO8B,OAAOzB,MAAP,CAAckC,QAAd,CAAP;AAED,SATS,EASP,EATO,CAAV;AAUD;;AAED5D,cAAQ,aAASqC,GAAT,CAAaiB,SAAb,EAAwBK,OAAxB,EAAiC3E,MAAjC,CAAR;AACD,KAvBX;AAyBD,GArCM,CAAP;AAsCD;;AAEM,SAASX,aAAT,GAA0B;AAC/B,MAAIyF,YAAY,CAAC,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAvB,GAA8B,CAA/B,EAAkCC,QAAlC,CAA2C,EAA3C,CAAhB;AACA,SAAOH,YAAY,mBAAmBI,OAAnB,CAA2B,MAA3B,EAAmC;AAAA,WAAM,CAACC,KAAKC,MAAL,KAAgB,EAAhB,GAAqB,CAAtB,EAAyBH,QAAzB,CAAkC,EAAlC,CAAN;AAAA,GAAnC,EACmBI,WADnB,EAAnB;AAED","file":"db.js","sourcesContent":["import async from 'async'\nimport lodash from 'lodash'\nimport lodashFp from 'lodash/fp'\n\nfunction _load (id, senecaQuery, next) {\n  senecaQuery.load$(id, (err, data) => {\n    if (err) return next(err)\n    if (!data) return next(new Error('#notFound'))\n\n    next(null, data.data$())\n  })\n\n}\n\nfunction _getFieldValue (object, field) {\n  let fieldKey\n  let fieldValue\n\n  //If field name has a period use lodash\n  //for dot notation access\n  if (field.indexOf('.') > 0) {\n    let keyRaw = field.split(/[\\s.]+/)\n\n    fieldKey   = keyRaw[keyRaw.length - 1]\n    fieldValue = lodash.chain(object)\n                       .at(field)\n                       .head()\n                       .value()\n  } else {\n    fieldKey   = field\n    fieldValue = object[field]\n  }\n\n  return {fieldKey, fieldValue}\n\n}\n\nexport function savePromisified (element, collection) {\n\n  let seneca = this\n\n  return new Promise((resolve, reject) => {\n    const query = Object.assign(seneca.make$(collection), element)\n\n    query.save$((err, dataRaw) => {\n      if (err) return reject(err)\n\n      const data = dataRaw.data$()\n      resolve({dataRaw, data})\n    })\n\n  })\n}\n\nexport function findPromisified (where, collection) {\n\n  let seneca = this\n\n  return new Promise((resolve, reject) => {\n    let query = seneca.make$(collection)\n\n    query.list$(where, (err, ret) => {\n      if (err) return reject(err)\n\n      const data    = ret ? ret.map(e => e.data$()) : []\n      const dataRaw = ret || []\n\n      resolve({dataRaw, data})\n    })\n\n  })\n\n}\n\nexport function findOnePromisified (where, collection) {\n\n  let seneca = this\n\n  return new Promise((resolve, reject) => {\n    let query = seneca.make$(collection)\n\n    query.load$(where, (err, ret) => {\n      if (err) return reject(err)\n\n      const data    = ret ? ret.data$() : undefined\n      const dataRaw = ret || undefined\n\n      resolve({dataRaw, data})\n    })\n\n  })\n\n}\n\nexport function findOrPromisified (where, collection) {\n\n  let seneca = this\n\n  return new Promise((resolve, reject) => {\n    let query = seneca.make$(collection)\n\n    const conditionsTasks = where.map((cond) => {\n      function runQuery (next) {\n        query.list$(cond, (err, data) => {\n          next(null, data)\n        })\n      }\n\n      return runQuery\n    })\n\n    async.series(conditionsTasks, (err, values) => {\n\n      //Bundle all together the raw and object data\n      //in order to extract them later.\n      const listResult = lodash.reduce(values, (acc, v) => {\n        const objs = v.map(e => Object.assign({}, {d : e.data$()}, {r : e}))\n        return acc.concat(objs)\n      }, [])\n\n      //Merge the list by the id\n      const listMerged = lodash.uniqBy(listResult, 'd.id')\n\n      //Extract the raw and object data\n      const listDataRaw = listMerged.map(r => r.r)\n      const listData    = listMerged.map(r => r.d)\n\n      const dataRaw = listDataRaw || {}\n      const data    = listData || {}\n\n      resolve({dataRaw, data})\n    })\n\n  })\n}\n\nexport function updatePromisified (dataRaw, bundle, fields) {\n\n  return new Promise((resolve, reject) => {\n\n    const originalDoc = dataRaw.data$()\n\n    const updatedDoc = lodash.reduce(fields, (acc, f) => {\n      const fieldToUpdate = lodashFp.set(f, lodash.get(bundle, f), acc)\n\n      const merged = lodash.mergeWith(originalDoc, fieldToUpdate, (origValue, newValue) => {\n\n        if (f.indexOf('.') > 0) {\n          return Object.assign({}, origValue, newValue)\n        }\n\n        if (lodash.isArray(origValue) || lodash.isPlainObject(origValue)) {\n          return newValue\n        }\n      })\n\n      return merged\n\n    }, {})\n\n    dataRaw.data$(updatedDoc)\n           .save$((err, dataRaw) => {\n             if (err) return reject(err)\n\n             const data = dataRaw.data$()\n             resolve({dataRaw, data})\n           })\n  })\n}\n\nexport function updateNativePromisified (where, opFields, collection) {\n\n  let seneca = this\n\n  return new Promise((resolve, reject) => {\n    let query = seneca.make$(collection)\n\n    query.native$((err, db) => {\n      let forms = db.collection(collection)\n      db.collection(collection)\n        .findAndModify(where, [['_id', 'asc']], opFields, {new : true}, (err, result) => {\n          if (err) return reject(err)\n          resolve(result.value)\n        })\n    })\n\n  })\n}\n\nexport function removeNativePromisified (where, collection) {\n\n  let seneca = this\n\n  return new Promise((resolve, reject) => {\n    let query = seneca.make$(collection)\n\n    query.native$((err, db) => {\n      db.collection(collection)\n        .remove(where, (err, result) => {\n          if (err) return reject(err)\n          resolve(result.result)\n        })\n    })\n  })\n\n}\n\nexport function removePromisified (where, collection) {\n  let seneca = this\n\n  return new Promise((resolve, reject) => {\n    let query = seneca.make$(collection)\n\n    query.remove$(where, (err, data) => {\n      if (err) return reject(err)\n      if (!data) return reject(err)\n\n      //It can only remove when value at a time.\n      //So if it wasn't errors it means it deleted one element.\n      resolve(1)\n    })\n\n  })\n\n}\n\nexport function populatePromisified (object, keyString, select, collection) {\n\n  let seneca = this\n\n  return new Promise((resolve, reject) => {\n\n    let query = seneca.make$(collection)\n\n    //Lodash 'at' function always returns an array.\n    //That's why head is invoked, it gets the first\n    //element of the array, in fact, the only one.\n    const subtree = lodash.chain(object)\n                          .at(keyString)\n                          .head()\n                          .value()\n\n    async.map(subtree, (id, next) => {\n                return _load(id, query, next)\n              }, (err, values) => {\n\n                const validValues = values.filter((v) => v != undefined)\n\n                let toMerge = validValues\n\n                if (select.length > 0) {\n\n                  toMerge = lodash.reduce(validValues, (result, v) => {\n\n                    let elements = lodash.reduce(select, (acc, s) => {\n                      let {fieldKey, fieldValue} = _getFieldValue(v, s)\n                      return lodashFp.set(fieldKey, fieldValue, acc)\n                    }, {})\n\n                    return result.concat(elements)\n\n                  }, [])\n                }\n\n                resolve(lodashFp.set(keyString, toMerge, object))\n              }\n    )\n  })\n}\n\nexport function mongoObjectId () {\n  var timestamp = (new Date().getTime() / 1000 | 0).toString(16)\n  return timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, () => (Math.random() * 16 | 0).toString(16))\n                                       .toLowerCase()\n}\n"]}